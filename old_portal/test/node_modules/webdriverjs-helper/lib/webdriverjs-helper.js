// Generated by CoffeeScript 1.7.1
(function() {
  var Alert, Elements, WebDriver, async, name, partialLinkTextFormula, proxy, urlHelper, webdriver, _, _click, _isDisplayed, _isEnabled, _isSelected, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __slice = [].slice;

  webdriver = require('selenium-webdriver');

  WebDriver = webdriver.WebDriver;

  _ = require('underscore');

  urlHelper = require('url');

  async = require('async');

  Elements = (function(_super) {
    __extends(Elements, _super);

    function Elements(wdElements) {
      this.wdElements = wdElements;
      this.initialized = false;
    }

    Elements.prototype.count = function(countHandler) {
      if (this.initialized) {
        return this.length;
      }
      return this.init((function(_this) {
        return function(elems) {
          return countHandler != null ? countHandler.call(_this, elems.length) : void 0;
        };
      })(this));
    };

    Elements.prototype.init = function(initHandler) {
      if (this.initialized) {
        return this;
      }
      return this.wdElements.then((function(_this) {
        return function(elems) {
          var elem, _i, _len;
          _this.initialized = true;
          for (_i = 0, _len = elems.length; _i < _len; _i++) {
            elem = elems[_i];
            _this.push(elem);
          }
          return initHandler != null ? initHandler.call(_this, _this) : void 0;
        };
      })(this));
    };

    Elements.prototype.get = function(index, getHandler) {
      if (index === void 0) {
        index = 0;
      }
      if (this.initialized) {
        return this[index];
      }
      return this.init((function(_this) {
        return function(elems) {
          return getHandler.call(_this, elems[index]);
        };
      })(this));
    };

    return Elements;

  })(Array);

  _ref = (function() {
    var _i, _len, _ref, _results;
    _ref = ['click', 'isSelected', 'isEnabled', 'isDisplayed'];
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      name = _ref[_i];
      _results.push(webdriver.WebElement.prototype[name]);
    }
    return _results;
  })(), _click = _ref[0], _isSelected = _ref[1], _isEnabled = _ref[2], _isDisplayed = _ref[3];

  _.extend(webdriver.WebElement.prototype, {
    text: function(textHandler) {
      return this.getText().then(proxy(this, textHandler));
    },
    html: function(htmlHandler) {
      return this.getInnerHtml().then(proxy(this, htmlHandler));
    },
    click: function(clickHandler) {
      return _click.call(this).then(proxy(this, clickHandler));
    },
    enter: function(text, enterHandler) {
      return this.sendKeys(text).then(proxy(this, enterHandler));
    },
    check: function() {
      return this.isSelected((function(_this) {
        return function(checked) {
          if (!checked) {
            return _this.click();
          }
        };
      })(this));
    },
    uncheck: function() {
      return this.isSelected((function(_this) {
        return function(checked) {
          if (checked) {
            return _this.click();
          }
        };
      })(this));
    },
    select: function() {
      return this.isSelected((function(_this) {
        return function(checked) {
          if (!checked) {
            return _this.click();
          }
        };
      })(this));
    },
    isSelected: function(valHandler) {
      _isSelected.call(this).then(proxy(this, valHandler));
      return this;
    },
    isChecked: function(valHandler) {
      _isSelected.call(this).then(proxy(this, valHandler));
      return this;
    },
    isEnabled: function(valHandler) {
      return _isEnabled.call(this).then(proxy(this, valHandler));
    },
    isDisplayed: function(valHandler) {
      return _isDisplayed.call(this).then(proxy(this, valHandler));
    },
    value: function(valHandler) {
      return this.attr('value', proxy(this, valHandler));
    },
    attr: function(attrName, attrHandler) {
      return this.getAttribute(attrName).then(proxy(this, attrHandler));
    },
    css: function(cssName, valueHandler) {
      return this.getCssValue(cssName).then(proxy(this, valueHandler));
    },
    values: function(valuesHandler) {
      var that, values;
      values = [];
      that = this;
      return this.findElements(webdriver.By.tagName('option')).then(function(options) {
        return async.each(options, function(option, callback) {
          return option.isSelected(function(selected) {
            if (!selected) {
              return callback();
            }
            return option.value(function(optionValue) {
              values.push(optionValue);
              return callback();
            });
          });
        }, function(error, results) {
          return valuesHandler(values);
        });
      });
    },
    option: function() {
      var targetOptions, values;
      values = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      values = _.map(values, function(num) {
        return num.toString();
      });
      targetOptions = [];
      return this.findElements(webdriver.By.tagName('option')).then(function(options) {
        return async.each(options, function(option, callback) {
          return option.getAttribute('value').then(function(optionValue) {
            if (_.contains(values, optionValue)) {
              targetOptions.push(option);
            }
            return callback();
          });
        }, function() {
          return _.each(targetOptions, function(option) {
            return option.click();
          });
        });
      });
    }
  });

  _.extend(WebDriver.Window.prototype, {
    position: function(x, y) {
      if (typeof x === 'function') {
        return this.getPosition().then((function(_this) {
          return function(position) {
            return x.call(_this, position.x, position.y);
          };
        })(this));
      } else {
        return this.setPosition(x, y);
      }
    },
    size: function(width, height) {
      if (typeof width === 'function') {
        return this.getSize().then((function(_this) {
          return function(size) {
            return width.call(_this, size.width, size.height);
          };
        })(this));
      } else {
        return this.setSize(width, height);
      }
    }
  });

  Alert = (function() {
    function Alert(wdAlert) {
      this.wdAlert = wdAlert;
    }

    Alert.prototype.text = function(textHandler) {
      return this.wdAlert.getText().then(proxy(this, textHandler));
    };

    Alert.prototype.accept = function(thenHandler) {
      return this.wdAlert.accept().then(proxy(this, thenHandler));
    };

    Alert.prototype.dismiss = function(thenHandler) {
      return this.wdAlert.dismiss().then(proxy(this, thenHandler));
    };

    Alert.prototype.enter = function(text, thenHandler) {
      return this.wdAlert.sendKeys(text).then(proxy(this, thenHandler));
    };

    return Alert;

  })();

  proxy = function(context, handler) {
    return function() {
      return handler != null ? handler.apply(context, arguments) : void 0;
    };
  };

  partialLinkTextFormula = /\:contains\([\'\"](.+)[\'\"]\)/;

  _.extend(WebDriver.prototype, {
    _exec: function() {
      var arg, args, asyncArgument, callArgs, callback, execute, script;
      args = _.toArray(arguments);
      asyncArgument = args.shift();
      if (args.length < 1) {
        return;
      }
      while (arg = args.pop()) {
        if (_.isString(arg)) {
          script = arg;
        }
        if (_.isFunction(arg)) {
          callback = arg;
        }
        if (_.isArray(arg)) {
          callArgs = arg;
        }
        if (arg instanceof Elements) {
          callArgs = arg.wdElements;
        }
      }
      execute = asyncArgument ? this.executeAsyncScript : this.executeScript;
      return execute.call(this, script, callArgs).then(proxy(this, callback));
    },
    exec: function() {
      return this._exec.apply(this, [false].concat(_.toArray(arguments)));
    },
    execAsync: function() {
      return this._exec.apply(this, [true].concat(_.toArray(arguments)));
    },
    dialog: function() {
      return new Alert(this.switchTo().alert());
    },
    window: function() {
      return this.manage().window();
    },
    elements: function(selector) {
      return new Elements(this.findElements(webdriver.By.css(selector)));
    },
    element: function(selector) {
      return this.findElement(webdriver.By.css(selector));
    },
    input: function(selector) {
      return this.element(selector);
    },
    link: function(selector) {
      var partialText;
      partialText = '';
      selector.replace(partialLinkTextFormula, function(matched, partial) {
        return partialText = partial;
      });
      if (partialText === '') {
        return this.element(selector);
      }
      return this.findElement(webdriver.By.partialLinkText(partialText));
    },
    button: function(label, partial) {
      return this.content(label, 'button', partial);
    },
    dropdownlist: function(selector) {
      return this.element(selector);
    },
    navigateTo: function(url) {
      return this.currentUrl((function(_this) {
        return function(currUrl) {
          return _this.get(urlHelper.resolve(currUrl, url));
        };
      })(this));
    },
    refresh: function() {
      return this.navigate().refresh();
    },
    back: function() {
      return this.navigate().back();
    },
    forward: function() {
      return this.navigate().forward();
    },
    title: function(titleHandler) {
      return this.getTitle().then(proxy(this, titleHandler));
    },
    content: function(content, element, partial) {
      var xpath;
      if (!element) {
        element = '*';
      }
      xpath = partial ? "//" + element + "[text()[contains(.,'" + content + "')]]" : "//" + element + "[text()='" + content + "']";
      return this.findElement(webdriver.By.xpath(xpath));
    },
    currentUrl: function(parsedUrlHandler) {
      return this.getCurrentUrl().then((function(_this) {
        return function(currUrl) {
          return parsedUrlHandler != null ? parsedUrlHandler.call(_this, currUrl, urlHelper.parse(currUrl)) : void 0;
        };
      })(this));
    }
  });

}).call(this);
