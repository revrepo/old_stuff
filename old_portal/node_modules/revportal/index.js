var nodemailer = require("nodemailer");
var sendmailTransport = require('nodemailer-sendmail-transport');
var revportal = require("./");
var http = require("http");
var randomstring = require("randomstring");
//var settings = require("./settings");
var logger = require("./logger");
var config= require("../../config/config");
var revlogger = require("rev-logger");

//for ssl certificates
exports.ssl_certificates = config.ssl_certificates;

//for mongo constants
exports.mongo = config.mongo;

//for forgot password
exports.forgot_pwd = config.forgot_pwd;

//for cube query constants
exports.settings = config.settings;

exports.tokenArr = config.tokenArr.tokens;

//for heatmap cron log directory path
exports.HeatMapJob = config.HeatMapJob;

//for device browsers cron log directory path
exports.deviceBrowsersLog = config.deviceBrowsersLog;

//for default values
exports.default_details = config.default_details;

// generic settings
exports.general = config.general;

//for dns api
exports.dns_api = config.dns_api;
//for ssl certificates
/**exports.ssl_certificates = {
	is_https:true,
	key:"/etc/ssl/revsw/wildcard.revsw.net.key",
        cert:"/etc/ssl/revsw/wildcard.revsw.net.crt",
        ca:"/etc/ssl/revsw/globalsign_ca.crt"
};

//for mongo constants
exports.mongo = {
	url: "54.210.116.53",
	//url: "54.183.7.30",
	port:"27017",
	database:"cube_development",
	is_auth_required: false,
	username: "revuser_prod",
	password: "1QaZTech135",
	event_collection:'pl_info_events'
};

//for forgot password
exports.forgot_pwd = {
	url:"https://portal-qa.revsw.net/forgot_pwd.html",
	validate_time:10,
};

exports.settings = {
	// Network time
	nw_time : "1.0/metric?expression=median(pl_info(networkTime))",
	// BrowserTime
	br_time : "1.0/metric?expression=median(pl_info(browserTime))",
	// BackendTime
	bd_time : "1.0/metric?expression=median(pl_info(backendTime))",
	// PageLoadTime
	page_load_time : "1.0/metric?expression=median(pl_info(pageloadTime))",
	
	step :{ "10sec": "1e4",
		    "1min" : "6e4",
			"5min" : "3e5",
			"1hr"  : "36e5",
			"1day" : "864e5"
		  }
};
*/

exports.heatMapCronErrorlog = function(msg) {
	logger.fileLogF(revportal.HeatMapJob.err_log_path,'error',msg);
};

exports.deviceBrowsersCronErrorlog = function(msg) {
	logger.fileLogF(revportal.deviceBrowsersLog.path,'error',msg);
};

exports.generateQuery  = function(params,info){
	
	var query = "";

	if(info=="count"){
		query = "1.0/metric?expression=sum(pl_info";
	}else{
		query =  "1.0/metric?expression=median(pl_info("+info+")";
	}
	
	if(params.domain_name){
		query+=".eq(domain,'"+params.domain_name+"')" ;
	}
	if(params.device){
		query+=".eq(device,'"+params.device+"')" ;
	}
	if(params.geography){
		query+=".eq(geography,'"+params.geography+"')" ;
	}
	if(params.network){
		query+=".eq(network,'"+params.network+"')" ;
	}
	query+= ")";
	if(params.time_range){
		if(params.time_range == "30days"){
			var ed = new Date().getTime() - 30*24*60*60*1000;
			query+="&start="+new Date(ed).toISOString();
			query+="&stop="+new Date().toISOString();
			//query+="&step="+revportal.settings.step["1day"];
			query+="&step="+revportal.settings.step["1hr"];
			
		}else if(params.time_range == "15days"){
			var ed = new Date().getTime() - 15*24*60*60*1000;
			query+="&start="+new Date(ed).toISOString();
			query+="&stop="+new Date().toISOString();
			//query+="&step="+revportal.settings.step["5min"];
			query+="&step="+revportal.settings.step["1hr"];
		}else if(params.time_range == "24hours"){
			var ed = new Date().getTime() - 24*60*60*1000;
			query+="&start="+new Date(ed).toISOString();
			query+="&stop="+new Date().toISOString();
			//query+="&step="+revportal.settings.step["1min"];
			query+="&step="+revportal.settings.step["5min"];
		}else if(params.time_range == "12hours"){
			var ed = new Date().getTime() - 12*60*60*1000;
			query+="&start="+new Date(ed).toISOString();
			query+="&stop="+new Date().toISOString();
			//query+="&step="+revportal.settings.step["1min"];
			query+="&step="+revportal.settings.step["5min"];
		}else{
			var ed = new Date().getTime() - 6*60*60*1000;
			query+="&start="+new Date(ed).toISOString();
			query+="&stop="+new Date().toISOString();
			//query+="&step="+revportal.settings.step["10sec"];
			query+="&step="+revportal.settings.step["5min"];
		}
	}else{
		var ed = new Date().getTime() - 6*60*60*1000;
		query+="&start="+new Date(ed).toISOString();
		query+="&stop="+new Date().toISOString();
		query+="&step="+revportal.settings.step["5min"];
	}
	return query;
};

exports.generateQueryCmp  = function(params,info){
	
	var query = "";

	if(info=="count"){
		query = "1.0/metric?expression=sum(pl_info";
	}else{
		query =  "1.0/metric?expression=median(pl_info("+info+")";
	}
	
	if(params.domain_name){
		query+=".eq(domain,'"+params.domain_name+"')" ;
	}
	if(params.device){
		query+=".eq(device,'"+params.device+"')" ;
	}
	if(params.geography){
		query+=".eq(geography,'"+params.geography+"')" ;
	}

	query+= ")";
	if(params.is_multi_domain_compare) {
		if(params.time_range == "6hours"){
			var ed = new Date().getTime() - 6*60*60*1000;
			query+="&start="+new Date(ed).toISOString();
			query+="&stop="+new Date().toISOString();
			//query+="&step="+revportal.settings.step["1day"];
			query+="&step="+revportal.settings.step["5min"];
			
		}else if(params.time_range == "12hours"){
			var ed = new Date().getTime() - 12*60*60*1000;
			query+="&start="+new Date(ed).toISOString();
			query+="&stop="+new Date().toISOString();
			//query+="&step="+revportal.settings.step["1min"];
			query+="&step="+revportal.settings.step["5min"];
		}else if(params.time_range == "24hours"){
			var ed = new Date().getTime() - 24*60*60*1000;
			query+="&start="+new Date(ed).toISOString();
			query+="&stop="+new Date().toISOString();
			//query+="&step="+revportal.settings.step["1min"];
			query+="&step="+revportal.settings.step["5min"];
		}else if(params.time_range == "15days"){
			var ed = new Date().getTime() - 15*24*60*60*1000;
			query+="&start="+new Date(ed).toISOString();
			query+="&stop="+new Date().toISOString();
			//query+="&step="+revportal.settings.step["1day"];
			query+="&step="+revportal.settings.step["1day"];
		}else if(params.time_range == "30days"){
			var ed = new Date().getTime() - 30*24*60*60*1000;
			query+="&start="+new Date(ed).toISOString();
			query+="&stop="+new Date().toISOString();
			//query+="&step="+revportal.settings.step["1day"];
			query+="&step="+revportal.settings.step["1day"];
		} else{
			var ed = new Date().getTime() - 6*60*60*1000;
			query+="&start="+new Date(ed).toISOString();
			query+="&stop="+new Date().toISOString();
			//query+="&step="+revportal.settings.step["1day"];
			query+="&step="+revportal.settings.step["5min"];
		}
	} else {
		if(params.t_diff == "14days"){
			query+="&start="+new Date(params.from_range).toISOString();
			query+="&stop="+new Date(params.to_range).toISOString();
			query+="&step="+revportal.settings.step["1hr"];
		}else if(params.t_diff == "7days"){
			query+="&start="+new Date(params.from_range).toISOString();
			query+="&stop="+new Date(params.to_range).toISOString();
			query+="&step="+revportal.settings.step["1hr"];
		}else{
			query+="&start="+new Date(params.from_range).toISOString();
			query+="&stop="+new Date(params.to_range).toISOString();
			query+="&step="+revportal.settings.step["1hr"];
		}
	}
	
	return query;
};

exports.generateStatsQuery  = function(params,info){
	var query =  "1.0/metric?expression=median(pl_info("+info+")";
	
	if(params.domain_name){
		query+=".eq(domain,'"+params.domain_name+"')" ;
	}
	query+= ")";
	
	if(params.time_range){
		if(params.time_range == "1 hour"){
			var ed =  new Date().getTime() - 1*60*60*1000 ;
			query+="&start="+new Date(ed).toISOString();
			query+="&stop="+new Date().toISOString();
			query+="&step="+revportal.settings.step["5min"];
		}else if(params.time_range == "24 hours"){
			var ed =  new Date().getTime() - 24*60*60*1000;
			query+="&start="+new Date(ed).toISOString();
			query+="&stop="+new Date().toISOString();
			query+="&step="+revportal.settings.step["1min"];
		}else if(params.time_range == "7 days"){
			var ed =  new Date().getTime() - 7*24*60*60*1000;
			query+="&start="+new Date(ed).toISOString();
			query+="&stop="+new Date().toISOString();
			query+="&step="+revportal.settings.step["1day"];
		}else if(params.time_range == "30 days"){
			var ed =  new Date().getTime() - 30*24*60*60*1000;
			query+="&start="+new Date(ed).toISOString();
			query+="&stop="+new Date().toISOString();
			query+="&step="+revportal.settings.step["1day"];
		}else if(params.time_range == "Rev Start"){
			var ed =  new Date().getTime() - params.time_val*24*60*60*1000;
			query+="&start="+new Date(ed).toISOString();
			query+="&stop="+new Date().toISOString();
			query+="&step="+revportal.settings.step["1day"];
		}else{
			var ed =  new Date().getTime() - 1*60*60*1000;
			query+="&start="+new Date(ed).toISOString();
			query+="&stop="+new Date().toISOString();
			query+="&step="+revportal.settings.step["1hr"];
		}
	}else{
		var ed =  new Date().getTime() - 1*60*60*1000;
		query+="&start="+new Date(ed).toISOString();
		query+="&stop="+new Date().toISOString();
		query+="&step="+revportal.settings.step["1hr"];
	}
	return query;
};

exports.generateAnalyticsQuery  = function(params,info){
	var query = "";
	query =  "1.0/metric?expression=median(pl_info("+info+")";

	if(params.domain_name){
		query+=".eq(domain,'"+params.domain_name+"')" ;
	}
	query+= ")";
	if(params.time_range){
		if(params.time_range == "30days"){
			var ed =  new Date().getTime() - 30*24*60*60*1000;
			query+="&start="+new Date(ed).toISOString();
			query+="&stop="+new Date().toISOString();
			query+="&step="+revportal.settings.step["1day"];
		}else if(params.time_range == "15days"){
			var ed =  new Date().getTime() - 15*24*60*60*1000;
			query+="&start="+new Date(ed).toISOString();
			query+="&stop="+new Date().toISOString();
			query+="&step="+revportal.settings.step["1day"];
		}else if(params.time_range == "7days"){
			var ed =  new Date().getTime() - 7*24*60*60*1000;
			query+="&start="+new Date(ed).toISOString();
			query+="&stop="+new Date().toISOString();
			query+="&step="+revportal.settings.step["1hr"];
		}else{
			var ed =  new Date().getTime() - 3*24*60*60*1000;
			query+="&start="+new Date(ed).toISOString();
			query+="&stop="+new Date().toISOString();
			query+="&step="+revportal.settings.step["1hr"];
		}
	}else{
			var ed =  new Date().getTime() - 3*24*60*60*1000;
			query+="&start="+new Date(ed).toISOString();
			query+="&stop="+new Date().toISOString();
			query+="&step="+revportal.settings.step["1hr"];
	}
	return query;
};

exports.median = function(values){
    values.sort( function(a,b) {return a - b;} );
    var half = Math.floor(values.length/2);
    if(values.length % 2){
        return values[half];
    }else{
        return (values[half-1] + values[half]) / 2;
    }
};

exports.stats_page = {
	avg_page_load_time : function(params, callback) {
		console.log("came in to the stats_page_load_time");
		var page_load_time = [];
		var page_load_url = params.cube_url + revportal.generateStatsQuery(params, "pageloadTime");
		//console.log("page_load_url--->>>", page_load_url);
		var avg_page_load_req = http.get(page_load_url, function(res) {
			try {
				var opdata = "";
				res.on('data', function(chunk) {
					opdata += chunk.toString();
				});
				res.on('end', function() {
					try {
						opdata = JSON.parse(opdata);
					} catch (e) {
						callback({
							status : false,
							response : 0
						});
					}
					//console.log("OPPP DATA >>>>>>>",opdata);

					for ( var i = 0; i < opdata.length; i++) {
						if (opdata[i].hasOwnProperty("value") && opdata[i].value > 0) {
							page_load_time.push(opdata[i].value);
						}
						if (i == opdata.length - 1) {
							console.log("I VAL >>>>>>>",i, "OP DATA LEN",opdata.length);
							callback({
								status : true,
								response : revportal.median(page_load_time)
							});
						}
					}
				});
			} catch (e) {
				callback({
					status : false,
					response : 0
				});
			}
		});
		avg_page_load_req.on('error', function(e) {
			callback({
				status : false,
				response : 0
			});
		});
	},
	avg_first_byte_time : function(params, callback) {
		console.log("came in to the avg_first_byte_time");
		var first_byte_time =[];
		var first_byte_url = params.cube_url + revportal.generateStatsQuery(params, "fbTime");
		console.log("first_byte_url--->>>", first_byte_url);
		var avg_first_byte_time_req = http.get(first_byte_url, function(res) {
			try {
				var opdata = "";
				res.on('data', function(chunk) {
					opdata += chunk.toString();
				});
				res.on('end',function() {
					try {
						opdata = JSON.parse(opdata);
					} catch (e) {
						callback({
							status : false,
							response : 0
						});
					}
					//console.log("FIRST BYTE OP DATA", opdata);

					for ( var i = 0; i < opdata.length; i++) {
						if (opdata[i].hasOwnProperty("value") && opdata[i].value > 0) {
							first_byte_time.push(opdata[i].value);
						}
						if (i == opdata.length - 1) {
							callback({
								status : true,
								response : revportal.median(first_byte_time)
							});
						}
					}
				});
			} catch (e) {
				callback({
					status : false,
					response : 0
				});
			}
		});
		avg_first_byte_time_req.on('error', function(e) {
			callback({
				status : false,
				response : 0
			});
		});
	}
};

exports.distribution_graph = {

	pageLoadTime : function(params,mode,callback) {
		var pageLoadTimes = [];
		var page_load_url = "";
		var page_load_count = "";
		if(mode=="nrml"){
			page_load_url = params.cube_url+revportal.generateQuery(params,"pageloadTime");
			page_load_count = params.cube_url+revportal.generateQuery(params,"count");
		}else{
			page_load_url = params.cube_url+revportal.generateQueryCmp(params,"pageloadTime");
			page_load_count = params.cube_url+revportal.generateQueryCmp(params,"count");
		}
		
		console.log("page_load_url---->>>>>",page_load_url);
		console.log("page_load_count---->>>>>",page_load_count);
		var page_load_req = http.get(page_load_url, function(res) {
			try{
				var opdata = "";
				res.on('data', function(chunk) {
					opdata += chunk.toString();
				});
				res.on('end', function() {
					console.log("Res End pageLoadTime Time");
					try{
						opdata = JSON.parse(opdata);
					}catch(e){
						callback({
							status : false,
							response : "Unable to parse the JSON. Please give valid evaluator URL"
						});
					}
					
					var count_req = http.get(page_load_count, function(c_res){
						try{
							var c_opdata = "";
							c_res.on('data', function(c_chunk) {
								c_opdata += c_chunk.toString();
							});

							c_res.on('end', function() {
								console.log("Res End pageLoad count");
								try{
									c_opdata = JSON.parse(c_opdata);
								}catch(e){
									callback({
										status : false,
										response : "Unable to parse the JSON. Please give valid evaluator URL"
									});
								}
								if(opdata.length == c_opdata.length){
									for ( var i = 0; i < opdata.length; i++) {
										var val = 0,
											c_val = 0;
										if (opdata[i].hasOwnProperty("value")) {
											if(opdata[i].time = c_opdata[i].time){
												val = opdata[i].value;
												c_val = c_opdata[i].value;
											}
										}
										pageLoadTimes.push({
											time : opdata[i].time,
											pageLoadTime : val,
											count : c_val
										});
										if (i == opdata.length - 1) {
											callback({
												status : true,
												response : pageLoadTimes
											});
										}
									}
								}else{
									callback({
										status : false,
										response : "Unable to fetch valid data."
									});
								}
							});
						}catch(e){
							callback({
								status : false,
								response : e.message
							});
						}
					});
					count_req.on('error', function(e) {
						callback({
							status : false,
							response : e.message
						});
					});
				});
			}catch(e){
				callback({
					status : false,
					response : e.message
				});
			}
		});

		page_load_req.on('error', function(e) {
			callback({
				status : false,
				response : e.message
			});
		});

	}
};

exports.area_graph = {

	/**
	 * Getting the Network Time details
	 * @param params,callback
	 * @return networkTime array
	 */
	networkTime : function(params,mode,callback) {

		var networkTime = [];
		console.log("nt params--->>>",params);
		var nw_url = params.cube_url+revportal.generateQuery(params,"networkTime");
		console.log("nw_url---->>>>>",nw_url);
		var nw_req = http.get(nw_url, function(res) {
			try{
				var opdata = "";
				res.on('data', function(chunk) {
					opdata += chunk.toString();
				});
				res.on('end', function() {
					console.log("Res End NW Time");
					try{
						opdata = JSON.parse(opdata);
					}catch(e){
						callback({
							status : false,
							response :"Unable to parse the JSON. Please give valid evaluator URL"
						});
					}					
					for ( var i = 0; i < opdata.length; i++) {
						var val = 0;
						if (opdata[i].hasOwnProperty("value")) {
							val = opdata[i].value;
						}
						networkTime.push({
							x : new Date(opdata[i].time).getTime()/1000,
							y : val
						});
						if (i == opdata.length - 1) {
							callback({
								status : true,
								response : networkTime
							});
						}
					}
				});
			}catch(e){
				callback({
					status : false,
					response : e.message
				});
			}
		});

		nw_req.on('error', function(e) {
			callback({
				status : false,
				response : e.message
			});
		});
	},

	/**
	 * Getting the Browser Time details
	 * @param params,callback
	 * @return browserTime array
	 */

	browserTime : function(params,mode,callback) {

		var browserTime = [];
		var br_url = params.cube_url+revportal.generateQuery(params,"browserTime");
		console.log("br_url---->>>>>",br_url);
		var br_req = http.get(br_url, function(res) {
			try{
				var opdata = "";
				res.on('data', function(chunk) {
					opdata += chunk.toString();
				});
				res.on('end', function() {
					console.log("Res End BW Time");
					try{
						opdata = JSON.parse(opdata);
					}catch(e){
						callback({
							status : false,
							response : "Unable to parse the JSON. Please give valid evaluator URL"
						});
					}
					for ( var i = 0; i < opdata.length; i++) {
						var val = 0;
						if (opdata[i].hasOwnProperty("value")) {
							val = opdata[i].value;
						}
						browserTime.push({
							x : new Date(opdata[i].time).getTime()/1000,
							y : val
						});
						if (i == opdata.length - 1) {
							callback({
								status : true,
								response : browserTime
							});
						}
					}
	
				});
			}catch(e){
				callback({
					status : false,
					response : e.message
				});
			}
		});

		br_req.on('error', function(e) {
			callback({
				status : false,
				response : e.message
			});
		});
	},

	/**
	 * Getting the BackendTime details
	 * @param params,callback
	 * @return backendTime array
	 */

	backendTime : function(params,mode,callback) {
		var backendTime = [];
		var bd_url = params.cube_url+revportal.generateQuery(params,"backendTime");
		console.log("bd_url---->>>>>",bd_url);
		var bd_req = http.get(bd_url, function(res) {
			try{
				var opdata = "";
				res.on('data', function(chunk) {
					opdata += chunk.toString();
				});
				res.on('end', function() {
					console.log("Res End BD time");
					try{
						opdata = JSON.parse(opdata);
					}catch(e){
						callback({
							status : false,
							response : "Unable to parse the JSON. Please give valid evaluator URL"
						});
					}
					for ( var i = 0; i < opdata.length; i++) {
						var val = 0;
						if (opdata[i].hasOwnProperty("value")) {
							val = opdata[i].value;
						}
						backendTime.push({
							x : new Date(opdata[i].time).getTime()/1000,
							y : val
						});
						if (i == opdata.length - 1) {
							callback({
								status : true,
								response : backendTime
							});
						}
					}
				});
			}catch(e){
				callback({
					status : false,
					response : e.message
				});
			}
		});

		bd_req.on('error', function(e) {
			callback({
				status : false,
				response : e.message
			});
		});
	},

	/**
	 * Getting the PageLoadTime details
	 * @param params,callback
	 * @return PageLoadTime array
	 */
	
	pageLoadTime : function(params,mode,callback) {
		var pageLoadTimes = [];
		var page_load_url = "";
		if(mode=="nrml"){
			page_load_url = params.cube_url+revportal.generateQuery(params,"pageloadTime");
		}else{
			page_load_url = params.cube_url+revportal.generateQueryCmp(params,"pageloadTime");
		}
		console.log("page_load_url---->>>>>",page_load_url);
		var page_load_req = http.get(page_load_url, function(res) {
			try{
				var opdata = "";
				res.on('data', function(chunk) {
					opdata += chunk.toString();
				});
				res.on('end', function() {
					console.log("Res End pageLoadTime Time");
					try{
						opdata = JSON.parse(opdata);
					}catch(e){
						callback({
							status : false,
							response : "Unable to parse the JSON. Please give valid evaluator URL"
						});
					}
					for ( var i = 0; i < opdata.length; i++) {
						var val = 0;
						if (opdata[i].hasOwnProperty("value")) {
							val = opdata[i].value;
						}
						pageLoadTimes.push({
							x : new Date(opdata[i].time).getTime()/1000,
							y : val
						});
						
						if (i == opdata.length - 1) {
							callback({
								status : true,
								response : pageLoadTimes
							});
						}
					}
				});
			}catch(e){
				callback({
					status : false,
					response : e.message
				});
			}
		});

		page_load_req.on('error', function(e) {
			callback({
				status : false,
				response : e.message
			});
		});

	},

	/**
	 * Getting the PageLoadTime details
	 * @param params,callback
	 * @return PageLoadTime array
	 */
	
	resourseNetworkTime : function(params,mode,callback) {
		var resNwTimes = [];
		var res_nw_url = "";
		if(mode=="nrml"){
			res_nw_url = params.cube_url+revportal.generateQuery(params,"resOrgNwTime");
		}else{
			res_nw_url = params.cube_url+revportal.generateQueryCmp(params,"resOrgNwTime");
		}
		console.log("res_nw_url---->>>>>",res_nw_url);
		var res_nw_req = http.get(res_nw_url, function(res) {
			try{
				var opdata = "";
				res.on('data', function(chunk) {
					opdata += chunk.toString();
				});
				res.on('end', function() {
					console.log("Res End resNwTimes");
					try{
						opdata = JSON.parse(opdata);
					}catch(e){
						callback({
							status : false,
							response : "Unable to parse the JSON. Please give valid evaluator URL"
						});
					}
					for ( var i = 0; i < opdata.length; i++) {
						var val = 0;
						if (opdata[i].hasOwnProperty("value")) {
							val = opdata[i].value;
						}
						resNwTimes.push({
							x : new Date(opdata[i].time).getTime()/1000,
							y : val
						});
						
						if (i == opdata.length - 1) {
							callback({
								status : true,
								response : resNwTimes
							});
						}
					}
				});
			}catch(e){
				callback({
					status : false,
					response : e.message
				});
			}
		});

		res_nw_req.on('error', function(e) {
			callback({
				status : false,
				response : e.message
			});
		});
	}
};
/*

*/
exports.mail = function() {
	this.transport = nodemailer.createTransport(sendmailTransport({ path: '/usr/sbin/sendmail' }));
	this.sendMail = function(mailOptions,callback) {
		console.log("New mailOptions---->>>",mailOptions);
		this.transport.sendMail(mailOptions, function(error, response) {
			if (error) {
				console.log("Unable to send the mail, response: ", error);
				callback(false);
			} else {
				console.log("Message sent: " + response.message);
				callback(true);
			};
		});
	};
};

exports.analytics_graph = {
	pageLoadTime : function(params, callback) {
		var pageLoadTimes = [];
		var page_load_url = params.cube_url+revportal.generateAnalyticsQuery(params,"pageloadTime");
		console.log("page_load_url",page_load_url)
		var page_load_req = http.get(page_load_url, function(res) {
			try{
				var opdata = "";
				res.on('data', function(chunk) {
					opdata += chunk.toString();
				});
				res.on('end', function() {
					console.log("Res End pageLoadTime Time");
					try{
						opdata = JSON.parse(opdata);
					}catch(e){
						callback({
							status : false,
							response : "Unable to parse the JSON. Please give valid evaluator URL"
						});
					}
					for ( var i = 0; i < opdata.length; i++) {
						var val = 0;
						if (opdata[i].hasOwnProperty("value")) {
							val = opdata[i].value;
						}
						pageLoadTimes.push({
							x : new Date(opdata[i].time).getTime()/1000,
							y : val
						});
						
						if (i == opdata.length - 1) {
							console.log("pageLoadTimes---->",pageLoadTimes);
							callback({
								status : true,
								response : pageLoadTimes
							});
						}
					}
				});
			}catch(e){
				callback({
					status : false,
					response : e.message
				});
			}
		});

		page_load_req.on('error', function(e) {
			callback({
				status : false,
				response : e.message
			});
		});

	}
};

exports.heatMapmail = function() {
	this.transport = nodemailer.createTransport("SMTP", {
		service : "Gmail",
		auth : {
			user : revportal.forgot_pwd.heatmap_from,
			pass : revportal.forgot_pwd.pswd_techmail
		}
	});
	this.sendMail = function(mailOptions,callback) {
		console.log("mailOptions---->>>",mailOptions);
		try{
			this.transport.sendMail(mailOptions, function(error, response) {
				if (error) {
					console.log("If Unable to send the mail");
					callback(false);
				} else {
					console.log("Message sent: " + response.message);
					callback(true);
				}
			});
		}catch(e){
			console.log("Unable to send the mail");
			callback(false);
		}
	};
};

exports.heatMapCacheMail = function(name,toEmail,body,subject){
	var mailBody = {};
	mailBody.from = revportal.forgot_pwd.heatmap_from;
	//mailBody.from = revportal.forgot_pwd.email_from;
	mailBody.to = toEmail;
	mailBody.subject = subject;
	
	
	//mailBody.html = "Please use the <b>"+ password +"</b> for login!"; 
	mailBody.html = body;

	return mailBody;
};

exports.loginOptions = function(name,toEmail){
	var mailBody = {};
	//mailBody.from = "techvedika6@gmail.com";
	mailBody.from = revportal.forgot_pwd.email_from;
	mailBody.to = toEmail;
	mailBody.subject = "Welcome to Rev";
	//mailBody.html = "<b>Your account created succesfully.</b>"; 

	var mailBody = {};
	//mailBody.from = "techrevsw@gmail.com";
	mailBody.from = revportal.forgot_pwd.email_from;
	mailBody.to = toEmail;
	mailBody.subject = "Welcome to Rev";

	var body ="<div style='width:100%;'>";
	body+="<div style='height:auto; width:90%;margin:0 auto;background: #EBEBEB;padding: 10px 2%;'>";
	body+="<img src='https://portal.revsw.net/media/logo_color.png' height='50'/>";
	body+="<div style='background:#fff;color:#5b5b5b;border-radius:4px;\n\
			font-family:arial;font-size:13px;padding:10px 20px;margin-top:10px;\n\
			line-height:17px;border:1px #ddd solid;border-top:0;clear:both'>";
	body+="<p>Dear <b>"+ name +"</b>,</p>";
	body+="<p style='text-align:justify;'>A new user account has been created for you on Rev Software's customer portal "+revportal.forgot_pwd.portal_url+".</p>";
	
	body+="The registered username/email is "+toEmail+". Please go to URL "+revportal.forgot_pwd.portal_url+", click on 'Password Reset' link and reset your password for the portal.";

	body+="<p>Should you have any questions or problems using your new account or accessing the Rev portal please don't hesitate to contact our Customer Support team by email "+revportal.forgot_pwd.support_url+".";
	body+="<p>Best Regards,<br/>\n\
	        <b>Rev Software Support Team</b><br/>\n\
			Email: "+revportal.forgot_pwd.support_url+"</p>";
	body+=" </div></div></div>";
	
	//mailBody.html = "Please use the <b>"+ password +"</b> for login!"; 
	mailBody.html = body;

	return mailBody;
};


exports.forgotOptions = function(name,toEmail,activationCode){
	var fpwdLink = revportal.forgot_pwd.url+"?ue="+toEmail+"&ac="+activationCode;
	var mailBody = {};
	//mailBody.from = "techrevsw@gmail.com";
	mailBody.from = revportal.forgot_pwd.email_from;
	mailBody.to = toEmail;
	mailBody.subject = "Forgotten Password";
	
	var body ="<div style='width:100%;'>";
	body+="<div style='height:auto; width:90%;margin:0 auto;background: #EBEBEB;padding: 10px 2%;'>";
	body+="<img src='https://portal.revsw.net/media/logo_color.png' height='50'/>";
	body+="<div style='background:#fff;color:#5b5b5b;border-radius:4px;font-family:arial;font-size:13px;padding:10px 20px;margin-top:10px;line-height:17px;border:1px #ddd solid;border-top:0;clear:both'>";
	body+="<p>Hello <b>"+ name +"</b>,</p>";
	body+="<p style='text-align:justify;'>This e-mail is in response to your recent request to recover a forgotten password on Rev Software's customer portal "+revportal.forgot_pwd.portal_url+". To reset your password, please click the link below:</p>";
	//body+="<b>Activation Code : <span style='color:#4682B4;font-size:14px;'>"+activationCode+"</span></b>";
	body+="<p> <span class='Object' id='OBJ_PREFIX_DWT104'><a href='"+fpwdLink+"' style='font-size:13px;color:#00baf0;text-decoration:none' target='_blank'>Click here</a></span> to reset your  password.</p>";
	body+="<p>This link will remain active for the next "+ revportal.forgot_pwd.validate_time +" minutes.</p>";
	body+="<p>If you are having a trouble accessing the link from your email client software, copy and paste the following link address into your browser window:</p>";
	body+="<p style='color:blue;text-decoration:none;'>"+fpwdLink+"</p>";
	body+="<p> This is an auto generated message - please do not reply to this e-mail.</p>";
	body+="<p>Should you have any questions regarding the email or Rev Software customer portal please don't hesitate to contact our Customer Support team by email "+revportal.forgot_pwd.support_url+".</p>";
	body+="<p>Best Regards,<br/><b>Rev Software Support Team</b><br/>Email: "+revportal.forgot_pwd.support_url+"</p>";
	body+=" </div></div></div>";
	
	//mailBody.html = "Please use the <b>"+ password +"</b> for login!"; 
	mailBody.html = body;

	return mailBody;
};

exports.authToken = function(){
	return randomstring.generate();
};

/**
* This function is used to prepare the json for deleted domains
*/
exports.prepare_deleted_domain_json = function(){
	var json = {};

	json.isDomainExist=false;
	json.message="This domain has been deleted";

	return json;
};
