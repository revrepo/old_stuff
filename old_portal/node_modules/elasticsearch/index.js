//Loading the required modules
var log = require("co-logger");
var http = require('http');
var https = require('https');
var fs = require('fs');
var util = require('util');
var exec = require('child_process').exec;
var units = require('node-units');

var config = require("../../config/config");

var QryUrl = config.elastic_search_adapter.url;

exports.traffic_page = {
  bandwidth_reports: function(params, callback) {
    console.log("Inside Bandwidth reports");
    var _to = (new Date()).getTime();
    var time_slice_sec = 600;
    var time_interval = "10m";
    _from = _to - from_time("24hours");
    var dateArray;
    if (params.filter != undefined && params.filter.time_range != undefined) {
      params.filter.time_range = params.filter.time_range.replace(" ", "");
      _from = _to - from_time(params.filter.time_range);
      if (params.filter.time_range == "15min") {
        time_interval = "10s";
        time_slice_sec = 10;
        dateArray = getDates((new Date()).lastDays(2), new Date());
      } else if (params.filter.time_range == "1hour") {
        time_interval = "30s";
        time_slice_sec = 30;
        dateArray = getDates((new Date()).lastDays(2), new Date());
      } else if (params.filter.time_range == "12hours" || params.filter.time_range == "6hours") {
        time_interval = "5m";
        time_slice_sec = 300;
        dateArray = getDates((new Date()).lastDays(2), new Date());
      } else if (params.filter.time_range == "24hours") {
        time_interval = "10m";
        time_slice_sec = 600;
        dateArray = getDates((new Date()).lastDays(2), new Date());
      } else if (params.filter.time_range == "7days") {
        time_interval = "1h";
        time_slice_sec = 3600;
        dateArray = getDates((new Date()).lastDays(7), new Date());
      } else if (params.filter.time_range == "30days") {
        time_interval = "12h";
        time_slice_sec = 43200;
        dateArray = getDates((new Date()).lastDays(30), new Date());
      } else {
        //console.log("IN ELLL BLK");	
        //time_interval = "'+time_interval+'";
        //console.log("TIME INTERVAL",time_interval);	
        time_slice_sec = 600;
        dateArray = getDates((new Date()).lastDays(2), new Date());
      }
    } else {
      console.log("IN ELLL BLK $$$$$$");
      //time_interval = "'+time_interval+'";
      console.log("TIME INTERVAL", time_interval);

      dateArray = getDates((new Date()).lastDays(2), new Date());
    }
    var qryStr = '{"facets": {"6": {"date_histogram": {"key_field": "@timestamp","value_field": "s_bytes","interval": "' + time_interval + '"},"global": true,"facet_filter": {"fquery": {"query": {"filtered": {"query": {"query_string": {"query": "domain:\\"' + params.domainName + '\\""}},"filter": {"bool": {"must": [{"range": {"@timestamp": {"from": ' + _from + ',"to": ' + _to + '}}}';
    var commonStr = ']'

    var endQry = '}}}}}}}},"size": 0}';

    var finalQryStr = '',
      browserQry = '',
      nonBrowserQry = '',
      spcntryQry = '';
    if (params && (params.filter == "" || params.filter == undefined)) {
      finalQryStr = qryStr + commonStr + endQry;
    } else {
      if (params.filter.device && params.filter.device == "Mobile") {
        browserQry = ',{"fquery": {"query": {"query_string": {"query": "name:(\'Mobile\')"}},"_cache": true}}';
      }
      if (params.filter.device && params.filter.device == "Non-Mobile") {
        nonBrowserQry = '],"must_not": [{"fquery": {"query": {"query_string": {"query": "name:(\'Mobile\')"}},"_cache": true}}';
      }
      if (params.filter.geography) {
        spcntryQry = ',{"fquery": {"query": {"query_string": {"query": "geoip.country_code2:(' + params.filter.geography + ')"}},"_cache": true}}';
      }
      if (params.filter.geography == undefined && (params.filter.device == undefined || params.filter.device == '')) {
        finalQryStr = qryStr + commonStr + endQry;
      } else if (params.filter.geography == undefined && params.filter.device != undefined) {
        if (params.filter.device == "Mobile") {
          finalQryStr = qryStr + browserQry + commonStr + endQry;
        } else if (params.filter.device == "Non-Mobile") {
          finalQryStr = qryStr + nonBrowserQry + commonStr + endQry;
        } else {
          finalQryStr = qryStr + commonStr + endQry;
        }
      } else if (params.filter.geography != undefined && (params.filter.device == undefined || params.filter.device == '')) {
        finalQryStr = qryStr + spcntryQry + commonStr + endQry;
      } else if (params.filter.geography != undefined && params.filter.device != undefined) {
        if (params.filter.device == "Mobile") {
          finalQryStr = qryStr + browserQry + spcntryQry + commonStr + endQry;
        } else if (params.filter.device == "Non-Mobile") {
          finalQryStr = qryStr + spcntryQry + nonBrowserQry + commonStr + endQry;
        } else {
          finalQryStr = qryStr + spcntryQry + commonStr + endQry;
        }
      }
    }
    var qry = 'curl -XGET \'' + QryUrl + dateArray.join(",") + '/_search?pretty\' -d \'' + finalQryStr + '\'';
    //console.log("command-->",qry);
    child = exec(qry, function(error, stdout, stderr) {
      if (stdout != "") {
        format_response_data(JSON.parse(stdout).facets, time_slice_sec, 'bw', function(resJson, summaryJson) {
          callback({
            status: true,
            summary: summaryJson,
            response: resJson
          });
        });
      } else {
        var resJson = [];
        callback({
          status: true,
          response: resJson
        });
      }
    });
  },
  traffic_count: function(params, callback) {
    var _to = (new Date()).getTime();
    var dateArray;
    var time_slice_sec = 600;
    _from = _to - from_time("24hours");
    var time_interval = "10m";
    if (params.filter != undefined && params.filter.time_range != undefined) {
      params.filter.time_range = params.filter.time_range.replace(" ", "");
      _from = _to - from_time(params.filter.time_range);
      if (params.filter.time_range == "15min") {
        time_interval = "10s";
        time_slice_sec = 10;
        dateArray = getDates((new Date()).lastDays(2), new Date());
      } else if (params.filter.time_range == "1hour") {
        time_interval = "30s";
        time_slice_sec = 30;
        dateArray = getDates((new Date()).lastDays(2), new Date());
      } else if (params.filter.time_range == "12hours" || params.filter.time_range == "6hours") {
        time_interval = "5m";
        time_slice_sec = 300;
        dateArray = getDates((new Date()).lastDays(2), new Date());
      } else if (params.filter.time_range == "24hours") {
        time_interval = "10m";
        time_slice_sec = 600;
        dateArray = getDates((new Date()).lastDays(2), new Date());
      } else if (params.filter.time_range == "7days") {
        time_interval = "1h";
        time_slice_sec = 3600;
        dateArray = getDates((new Date()).lastDays(7), new Date());
      } else if (params.filter.time_range == "30days") {
        time_interval = "12h";
        time_slice_sec = 43200;
        dateArray = getDates((new Date()).lastDays(30), new Date());
      } else {
        //time_interval = "'+time_interval+'";
        time_slice_sec = 600;
        dateArray = getDates((new Date()).lastDays(2), new Date());
      }
    } else {
      //time_interval = "'+time_interval+'";
      dateArray = getDates((new Date()).lastDays(2), new Date());
    }
    var qryStr = '{"facets": {"6": {"date_histogram": { "field": "@timestamp","interval": "' + time_interval + '"},"global": true,"facet_filter": {"fquery": {"query": {"filtered": {"query": {"query_string": {"query": "domain:\\"' + params.domainName + '\\""}},"filter": {"bool": {"must": [{"range": {"@timestamp": {"from": ' + _from + ',"to": ' + _to + '}}}';
    var commonStr = ']'

    var endQry = '}}}}}}}},"size": 0}';

    var finalQryStr = '',
      browserQry = '',
      nonBrowserQry = '',
      spcntryQry = '';
    if (params && (params.filter == "" || params.filter == undefined)) {
      finalQryStr = qryStr + commonStr + endQry;
    } else {
      if (params.filter.device && params.filter.device == "Mobile") {
        browserQry = ',{"fquery": {"query": {"query_string": {"query": "name:(\'Mobile\')"}},"_cache": true}}';
      }
      if (params.filter.device && params.filter.device == "Non-Mobile") {
        nonBrowserQry = '],"must_not": [{"fquery": {"query": {"query_string": {"query": "name:(\'Mobile\')"}},"_cache": true}}';
      }
      if (params.filter.geography) {
        spcntryQry = ',{"fquery": {"query": {"query_string": {"query": "geoip.country_code2:(' + params.filter.geography + ')"}},"_cache": true}}';
      }
      if (params.filter.geography == undefined && (params.filter.device == undefined || params.filter.device == '')) {
        finalQryStr = qryStr + commonStr + endQry;
      } else if (params.filter.geography == undefined && params.filter.device != undefined) {
        if (params.filter.device == "Mobile") {
          finalQryStr = qryStr + browserQry + commonStr + endQry;
        } else if (params.filter.device == "Non-Mobile") {
          finalQryStr = qryStr + nonBrowserQry + commonStr + endQry;
        } else {
          finalQryStr = qryStr + commonStr + endQry;
        }
      } else if (params.filter.geography != undefined && (params.filter.device == undefined || params.filter.device == '')) {
        finalQryStr = qryStr + spcntryQry + commonStr + endQry;
      } else if (params.filter.geography != undefined && params.filter.device != undefined) {
        if (params.filter.device == "Mobile") {
          finalQryStr = qryStr + browserQry + spcntryQry + commonStr + endQry;
        } else if (params.filter.device == "Non-Mobile") {
          finalQryStr = qryStr + spcntryQry + nonBrowserQry + commonStr + endQry;
        } else {
          finalQryStr = qryStr + spcntryQry + commonStr + endQry;
        }
      }
    }
    var qry = 'curl -XGET \'' + QryUrl + dateArray.join(",") + '/_search?pretty\' -d \'' + finalQryStr + '\'';
    //console.log("command-->",qry);
    child = exec(qry, function(error, stdout, stderr) {
      if (stdout != "") {
        format_response_data(JSON.parse(stdout).facets, time_slice_sec, 'hits', function(resJson) {
          callback({
            status: true,
            response: resJson
          });
        });
      } else {
        var resJson = [];
        callback({
          status: true,
          response: resJson
        });
      }
    });
  },
  bandwidth_graph: function(params, callback) {
    console.log("bandwidth params-->", params);
    var _to = (new Date()).getTime();
    var dateArray;
    _from = _to - from_time("24hours");
    if (params.filter != undefined && params.filter.fromTime != undefined) {
      _from = params.filter.fromTime;
      time_interval = "1d"
    }
    if (params.filter != undefined && params.filter.toTime != undefined) {
      _to = params.filter.toTime;
      time_interval = "1d"
    }
    if (params.filter != undefined && params.filter.fromTime != undefined && params.filter.toTime != undefined) {
      dateArray = getDates(new Date(params.filter.fromTime), new Date(params.filter.toTime));
    }
    if (params.reqFrom != undefined) {
      if (params.time_range != undefined) {
        params.time_range = params.time_range.replace(" ", "");
        //	_from = _to - from_time(params.time_range);
        if (params.time_range == "15min" || params.time_range == "1hour" || params.time_range == "12hours" || params.time_range == "6hours" || params.time_range == "24hours" || params.time_range == "7days" || params.time_range == "30days") {
          _from = _to - from_time(params.time_range);
        } else {
          _from = _to - (params.time_range * 24 * 60 * 60 * 1000);
        }
        if (params.time_range == "15min") {
          time_interval = "10s";
          dateArray = getDates((new Date()).lastDays(2), new Date());
        } else if (params.time_range == "1hour") {
          time_interval = "30s";
          dateArray = getDates((new Date()).lastDays(2), new Date());
        } else if (params.time_range == "12hours" || params.time_range == "6hours") {
          time_interval = "5m";
          dateArray = getDates((new Date()).lastDays(2), new Date());
        } else if (params.time_range == "24hours") {
          time_interval = "10m";
          dateArray = getDates((new Date()).lastDays(2), new Date());
        } else if (params.time_range == "7days") {
          time_interval = "1h";
          dateArray = getDates((new Date()).lastDays(7), new Date());
        } else if (params.time_range == "30days") {
          time_interval = "12h";
          dateArray = getDates((new Date()).lastDays(30), new Date());
        } else {
          time_interval = "1d";
          var dateArray = new Array();
          dateArray.push("logstash*");
        }
      } else {
        time_interval = "1d";
        var dateArray = new Array();
        dateArray.push("logstash*");
      }
    } else if (params.filter != undefined && params.filter.time_range != undefined) {
      _from = _to - from_time(params.filter.time_range);
      if (params.filter.time_range == "15min") {
        time_interval = "10s";
        time_slice_sec = 10;
        dateArray = getDates((new Date()).lastDays(2), new Date());
      } else if (params.filter.time_range == "1hour") {
        time_interval = "30s";
        time_slice_sec = 30;
        dateArray = getDates((new Date()).lastDays(2), new Date());
      } else if (params.filter.time_range == "12hours" || params.filter.time_range == "6hours") {
        time_interval = "5m";
        time_slice_sec = 300;
        dateArray = getDates((new Date()).lastDays(2), new Date());
      } else if (params.filter.time_range == "24hours") {
        time_interval = "10m";
        time_slice_sec = 600;
        dateArray = getDates((new Date()).lastDays(2), new Date());
      } else if (params.filter.time_range == "7days") {
        time_interval = "1h";
        time_slice_sec = 3600;
        dateArray = getDates((new Date()).lastDays(7), new Date());
      } else if (params.filter.time_range == "30days") {
        time_interval = "12h";
        time_slice_sec = 43200;
        dateArray = getDates((new Date()).lastDays(30), new Date());
      } else {
        time_interval = "'+time_interval+'";
        time_slice_sec = 600;
        dateArray = getDates((new Date()).lastDays(2), new Date());
      }
    } else {
      time_interval = "1d";
      var dateArray = new Array();
      dateArray.push("logstash*");
      //dateArray = getDates((new Date()).lastDays(2),new Date());
    }
    var qryStr = '{"facets": {"6": {"date_histogram": {"key_field": "@timestamp","value_field": "s_bytes","interval": "' + time_interval + '"},"global": true,"facet_filter": {"fquery": {"query": {"filtered": {"query": {"query_string": {"query": "domain:\\"' + params.domainName + '\\""}},"filter": {"bool": {"must": [{"range": {"@timestamp": {"from": ' + _from + ',"to": ' + _to + '}}}';
    var commonStr = ']'
    var endQry = '}}}}}}}},"size": 0}';

    var finalQryStr = '',
      browserQry = '',
      nonBrowserQry = '',
      spcntryQry = '';
    if (params && (params.filter == "" || params.filter == undefined)) {
      finalQryStr = qryStr + commonStr + endQry;
    } else {
      if (params.filter.device && params.filter.device == "Mobile") {
        browserQry = ',{"fquery": {"query": {"query_string": {"query": "name:(\'Mobile\')"}},"_cache": true}}';
      }
      if (params.filter.device && params.filter.device == "Non-Mobile") {
        nonBrowserQry = '],"must_not": [{"fquery": {"query": {"query_string": {"query": "name:(\'Mobile\')"}},"_cache": true}}';
      }
      if (params.filter.geography) {
        spcntryQry = ',{"fquery": {"query": {"query_string": {"query": "geoip.country_code2:(' + params.filter.geography + ')"}},"_cache": true}}';
      }
      if (params.filter.geography == undefined && (params.filter.device == undefined || params.filter.device == '')) {
        finalQryStr = qryStr + commonStr + endQry;
      } else if (params.filter.geography == undefined && params.filter.device != undefined) {
        if (params.filter.device == "Mobile") {
          finalQryStr = qryStr + browserQry + commonStr + endQry;
        } else if (params.filter.device == "Non-Mobile") {
          finalQryStr = qryStr + nonBrowserQry + commonStr + endQry;
        } else {
          finalQryStr = qryStr + commonStr + endQry;
        }
      } else if (params.filter.geography != undefined && (params.filter.device == undefined || params.filter.device == '')) {
        finalQryStr = qryStr + spcntryQry + commonStr + endQry;
      } else if (params.filter.geography != undefined && params.filter.device != undefined) {
        if (params.filter.device == "Mobile") {
          finalQryStr = qryStr + browserQry + spcntryQry + commonStr + endQry;
        } else if (params.filter.device == "Non-Mobile") {
          finalQryStr = qryStr + spcntryQry + nonBrowserQry + commonStr + endQry;
        } else {
          finalQryStr = qryStr + spcntryQry + commonStr + endQry;
        }
      }
    }
    var qry = 'curl -XGET \'' + QryUrl + dateArray.join(",") + '/_search?pretty\' -d \'' + finalQryStr + '\'';
    //console.log("command-->",qry);
    //send({status:true,response:qry});
    child = exec(qry, function(error, stdout, stderr) {
      if (stdout != "") {
        format_response_data(JSON.parse(stdout).facets, 10, 'bwGraph', function(resJson, summaryJson) {
          console.log("summary-->", summaryJson);
          callback({
            status: true,
            summary: summaryJson,
            response: resJson
          });
        });
      } else {
        var resJson = [];
        callback({
          status: true,
          response: resJson
        });
      }
    });
  },
  num_pages: function(params, callback) {
    //params.domainName = "static.treato.com";	
    console.log("inside pages accelerated");
    var _to = (new Date()).getTime();
    var dateArray;
    _from = _to - from_time("");
    var dateArray;
    if (params.reqFrom != undefined) {
      if (params.time_range != undefined) {
        params.time_range = params.time_range.replace(" ", "");
        //	_from = _to - from_time(params.time_range);
        if (params.time_range == "15min" || params.time_range == "1hour" || params.time_range == "12hours" || params.time_range == "6hours" || params.time_range == "24hours" || params.time_range == "7days" || params.time_range == "30days") {
          _from = _to - from_time(params.time_range);
        } else {
          _from = _to - (params.time_range * 24 * 60 * 60 * 1000);
        }
        if (params.time_range == "15min") {
          time_interval = "10s";
          dateArray = getDates((new Date()).lastDays(2), new Date());
        } else if (params.time_range == "1hour") {
          time_interval = "30s";
          dateArray = getDates((new Date()).lastDays(2), new Date());
        } else if (params.time_range == "12hours" || params.time_range == "6hours") {
          time_interval = "5m";
          dateArray = getDates((new Date()).lastDays(2), new Date());
        } else if (params.time_range == "24hours") {
          time_interval = "10m";
          dateArray = getDates((new Date()).lastDays(2), new Date());
        } else if (params.time_range == "7days") {
          time_interval = "1h";
          dateArray = getDates((new Date()).lastDays(7), new Date());
        } else if (params.time_range == "30days") {
          time_interval = "12h";
          dateArray = getDates((new Date()).lastDays(30), new Date());
        } else {
          time_interval = "1d";
          var dateArray = new Array();
          dateArray.push("logstash*");
        }
      } else {
        time_interval = "1d";
        var dateArray = new Array();
        dateArray.push("logstash*");
      }
    } else if (params.filter != undefined && params.filter.time_range != undefined) {
      params.filter.time_range = params.filter.time_range.replace(" ", "");
      _from = _to - from_time(params.filter.time_range);
      if (params.filter.time_range == "15min") {
        time_interval = "10s";
        time_slice_sec = 10;
        dateArray = getDates((new Date()).lastDays(2), new Date());
      } else if (params.filter.time_range == "1hour") {
        time_interval = "30s";
        time_slice_sec = 30;
        dateArray = getDates((new Date()).lastDays(2), new Date());
      } else if (params.filter.time_range == "12hours" || params.filter.time_range == "6hours") {
        time_interval = "5m";
        time_slice_sec = 300;
        dateArray = getDates((new Date()).lastDays(2), new Date());
      } else if (params.filter.time_range == "24hours") {
        time_interval = "10m";
        time_slice_sec = 600;
        dateArray = getDates((new Date()).lastDays(2), new Date());
      } else if (params.filter.time_range == "7days") {
        time_interval = "1h";
        time_slice_sec = 3600;
        dateArray = getDates((new Date()).lastDays(7), new Date());
      } else if (params.filter.time_range == "30days") {
        time_interval = "12h";
        time_slice_sec = 43200;
        dateArray = getDates((new Date()).lastDays(30), new Date());
      } else {
        time_interval = "10s";
        time_slice_sec = 10;
        dateArray = getDates((new Date()).lastDays(2), new Date());
      }
    } else {
      time_interval = "1d";
      //dateArray = getDates((new Date()).lastDays(2),new Date());
      var dateArray = new Array();
      dateArray.push("logstash*");
    }
    var qryStr = '{"facets": {"terms": {"terms": {"field": "cont_type.raw","size": 10,"order": "count","exclude": []},"facet_filter": {"fquery": {"query": {"filtered": {"query": {"bool": {"should": [{"query_string": {"query": "domain:\\"' + params.domainName + '\\""}}]}},"filter": {"bool": {"must": [{"range": {"@timestamp": {"from": ' + _from + ',"to": ' + _to + '}}},{"terms": {"cont_type.raw": ["text/html"]}}]}}}}}}}},"size": 0}';
    var qry = 'curl -XGET \'' + QryUrl + dateArray.join(",") + '/_search?pretty\' -d \'' + qryStr + '\'';
    //console.log("command-->",qry);

    child = exec(qry, function(error, stdout, stderr) {
      if (stdout != "") {
        format_response_data(JSON.parse(stdout).facets, 10, 'nopages', function(resJson) {
          callback({
            status: true,
            page_accelerated: resJson
          });
        });
      } else {
        var resJson = [];
        callback({
          status: true,
          page_accelerated: 0
        });
      }
    });
  },
  num_attacks_blocked: function(params, callback) {
    var _to = (new Date()).getTime();
    _from = _to - from_time("");
    callback({
      status: true,
      attack_count: 0
    });
  },
  top_countries: function(params, callback) {
    var _to = (new Date()).getTime();
    var time_slice_sec = 10;
    _from = _to - from_time("");
    var dateArray;
    if (params.filter != undefined && params.filter.time_range != undefined) {
      params.filter.time_range = params.filter.time_range.replace(" ", "");
      _from = _to - from_time(params.filter.time_range);
      if (params.filter.time_range == "15min") {
        time_interval = "10s";
        time_slice_sec = 10;
        dateArray = getDates((new Date()).lastDays(2), new Date());
      } else if (params.filter.time_range == "1hour") {
        time_interval = "30s";
        time_slice_sec = 30;
        dateArray = getDates((new Date()).lastDays(2), new Date());
      } else if (params.filter.time_range == "12hours" || params.filter.time_range == "6hours") {
        time_interval = "5m";
        time_slice_sec = 300;
        dateArray = getDates((new Date()).lastDays(2), new Date());
      } else if (params.filter.time_range == "24hours") {
        time_interval = "10m";
        time_slice_sec = 600;
        dateArray = getDates((new Date()).lastDays(2), new Date());
      } else if (params.filter.time_range == "7days") {
        time_interval = "1h";
        time_slice_sec = 3600;
        dateArray = getDates((new Date()).lastDays(7), new Date());
      } else if (params.filter.time_range == "30days") {
        time_interval = "12h";
        time_slice_sec = 43200;
        dateArray = getDates((new Date()).lastDays(30), new Date());
      } else {
        time_interval = "10s";
        time_slice_sec = 10;
        dateArray = getDates((new Date()).lastDays(2), new Date());
      }
    } else {
      time_interval = "10s";
      dateArray = getDates((new Date()).lastDays(2), new Date());
    }
    var qryStr = '{"facets": {"terms": {"terms": {"field": "geoip.country_code2.raw","size": 10,"order": "count","exclude": []},"facet_filter": {"fquery": {"query": {"filtered": {"query": {"bool": {"should": [{"query_string": {"query": "domain:\\"' + params.domainName + '\\""}}]}},"filter": {"bool": {"must": [{"range": {"@timestamp": {"from": ' + _from + ',"to": ' + _to + '}}},{"terms": {"cont_type.raw": ["text/html"]}}';
    var commonStr = ']'

    var endQry = '}}}}}}}},"size": 0}';

    var finalQryStr = '',
      browserQry = '',
      nonBrowserQry = '',
      spcntryQry = '';
    if (params && (params.filter == "" || params.filter == undefined)) {
      finalQryStr = qryStr + commonStr + endQry;
    } else {
      if (params.filter.device && params.filter.device == "Mobile") {
        browserQry = ',{"fquery": {"query": {"query_string": {"query": "name:(\'Mobile\')"}},"_cache": true}}';
      }
      if (params.filter.device && params.filter.device == "Non-Mobile") {
        nonBrowserQry = '],"must_not": [{"fquery": {"query": {"query_string": {"query": "name:(\'Mobile\')"}},"_cache": true}}';
      }
      if (params.filter.device == undefined || params.filter.device == '') {
        finalQryStr = qryStr + commonStr + endQry;
      } else if (params.filter.device == "Mobile") {
        finalQryStr = qryStr + browserQry + commonStr + endQry;
      } else if (params.filter.device == "Non-Mobile") {
        finalQryStr = qryStr + nonBrowserQry + commonStr + endQry;
      }
    }
    var qry = 'curl -XGET \'' + QryUrl + dateArray.join(",") + '/_search?pretty\' -d \'' + finalQryStr + '\'';
    //console.log("command-->",qry);
    child = exec(qry, function(error, stdout, stderr) {
      if (stdout != "") {
        format_response_data(JSON.parse(stdout).facets, time_slice_sec, 'top_cntry', function(resJson) {
          callback({
            status: true,
            response: resJson
          });
        });
      } else {
        var resJson = [];
        callback({
          status: true,
          response: resJson
        });
      }
    });
  },
  cache_efficiency: function(params, callback) {
    //params.domainName = "static.treato.com";	
    console.log("inside Cache Efficiency");
    var _to = (new Date()).getTime();
    _from = _to - from_time("");
    var dateArray;
    console.log("params inside-->", params);
    if (params.filter != undefined && params.filter.time_range != undefined) {
      params.filter.time_range = params.filter.time_range.replace(" ", "");
      _from = _to - from_time(params.filter.time_range);
      if (params.filter.time_range == "15min") {
        time_interval = "10s";
        time_slice_sec = 10;
        dateArray = getDates((new Date()).lastDays(2), new Date());
      } else if (params.filter.time_range == "1hour") {
        time_interval = "30s";
        time_slice_sec = 30;
        dateArray = getDates((new Date()).lastDays(2), new Date());
      } else if (params.filter.time_range == "12hours" || params.filter.time_range == "6hours") {
        time_interval = "5m";
        time_slice_sec = 300;
        dateArray = getDates((new Date()).lastDays(2), new Date());
      } else if (params.filter.time_range == "24hours") {
        time_interval = "10m";
        time_slice_sec = 600;
        dateArray = getDates((new Date()).lastDays(2), new Date());
      } else if (params.filter.time_range == "7days") {
        time_interval = "1h";
        time_slice_sec = 3600;
        dateArray = getDates((new Date()).lastDays(7), new Date());
      } else if (params.filter.time_range == "30days") {
        time_interval = "12h";
        time_slice_sec = 43200;
        dateArray = getDates((new Date()).lastDays(30), new Date());
      } else {
        time_interval = "10s";
        time_slice_sec = 10;
        dateArray = getDates((new Date()).lastDays(2), new Date());
      }
    } else {
      time_interval = "10s";
      dateArray = getDates((new Date()).lastDays(2), new Date());
    }
    var qryStr = '{"facets": {"terms": {"terms": {"field": "cache.raw","size": 3,"order": "count","exclude": []},"facet_filter": {"fquery": {"query": {"filtered": {"query": {"bool": {"should": [{"query_string": {"query": "domain:\\"' + params.domainName + '\\""}}]}},"filter": {"bool": {"must": [{"range": {"@timestamp": {"from": ' + _from + ',"to": ' + _to + '}}}]}}}}}}}},"size": 0}';
    var qry = 'curl -XGET \'' + QryUrl + dateArray.join(",") + '/_search?pretty\' -d \'' + qryStr + '\'';
    //console.log("command-->",qry);

    child = exec(qry, function(error, stdout, stderr) {
      if (stdout != "") {
        format_response_data(JSON.parse(stdout).facets, 10, 'top', function(resJson) {
          callback({
            status: true,
            response: resJson
          });
        });
      } else {
        var resJson = [];
        callback({
          status: true,
          response: 0
        });
      }
    });
  },
  cache_timeline: function(params, callback) {
    //params.domainName = "static.treato.com";	
    console.log("inside Cache Efficiency Timeline");
    var _to = (new Date()).getTime();
    _from = _to - from_time("");
    var dateArray;
    if (params.filter != undefined && params.filter.time_range != undefined) {
      params.filter.time_range = params.filter.time_range.replace(" ", "");
      _from = _to - from_time(params.filter.time_range);
      if (params.filter.time_range == "15min") {
        time_interval = "10s";
        time_slice_sec = 10;
        dateArray = getDates((new Date()).lastDays(2), new Date());
      } else if (params.filter.time_range == "1hour") {
        time_interval = "30s";
        time_slice_sec = 30;
        dateArray = getDates((new Date()).lastDays(2), new Date());
      } else if (params.filter.time_range == "12hours" || params.filter.time_range == "6hours") {
        time_interval = "5m";
        time_slice_sec = 300;
        dateArray = getDates((new Date()).lastDays(2), new Date());
      } else if (params.filter.time_range == "24hours") {
        time_interval = "10m";
        time_slice_sec = 600;
        dateArray = getDates((new Date()).lastDays(2), new Date());
      } else if (params.filter.time_range == "7days") {
        time_interval = "1h";
        time_slice_sec = 3600;
        dateArray = getDates((new Date()).lastDays(7), new Date());
      } else if (params.filter.time_range == "30days") {
        time_interval = "12h";
        time_slice_sec = 43200;
        dateArray = getDates((new Date()).lastDays(30), new Date());
      } else {
        time_interval = "10s";
        time_slice_sec = 10;
        dateArray = getDates((new Date()).lastDays(2), new Date());
      }
    } else {
      time_interval = "10s";
      time_slice_sec = 10;
      dateArray = getDates((new Date()).lastDays(2), new Date());
    }
    var qryStr = '{"facets": {"6": {"date_histogram": {"field": "@timestamp","interval": "' + time_interval + '"},"global": true,"facet_filter": {"fquery": {"query": {"filtered": {"query": {"query_string": {"query": "domain:\\"' + params.domainName + '\\" AND cache:\\"HIT\\""}},"filter": {"bool": {"must": [{"range": {"@timestamp": {"from": ' + _from + ',"to": ' + _to + '}}}]}}}}}}},"7": {"date_histogram": {"field": "@timestamp","interval": "' + time_interval + '"},"global": true,"facet_filter": {"fquery": {"query": {"filtered": {"query": {"query_string": {"query": "domain:\\"' + params.domainName + '\\""}},"filter": {"bool": {"must": [{"range": {"@timestamp": {"from": ' + _from + ',"to": ' + _to + '}}}]}}}}}}}},"size": 0}'


    var qry = 'curl -XGET \'' + QryUrl + dateArray.join(",") + '/_search?pretty\' -d \'' + qryStr + '\'';
    //console.log("command-->",qry);

    child = exec(qry, function(error, stdout, stderr) {
      if (stdout != "") {
        format_response_data(JSON.parse(stdout).facets, time_slice_sec, 'cache_time', function(resJson) {
          callback({
            status: true,
            response: resJson
          });
        });
      } else {
        var resJson = [];
        callback({
          status: true,
          response: 0
        });
      }
    });
  },
  top_response: function(params, callback) {
    var _to = (new Date()).getTime();
    var time_slice_sec = 10;
    _from = _to - from_time("");
    var dateArray;
    if (params.filter != undefined && params.filter.time_range != undefined) {
      params.filter.time_range = params.filter.time_range.replace(" ", "");
      _from = _to - from_time(params.filter.time_range);
      if (params.filter.time_range == "15min") {
        time_interval = "10s";
        time_slice_sec = 10;
        dateArray = getDates((new Date()).lastDays(2), new Date());
      } else if (params.filter.time_range == "1hour") {
        time_interval = "30s";
        time_slice_sec = 30;
        dateArray = getDates((new Date()).lastDays(2), new Date());
      } else if (params.filter.time_range == "12hours" || params.filter.time_range == "6hours") {
        time_interval = "5m";
        time_slice_sec = 300;
        dateArray = getDates((new Date()).lastDays(2), new Date());
      } else if (params.filter.time_range == "24hours") {
        time_interval = "10m";
        time_slice_sec = 600;
        dateArray = getDates((new Date()).lastDays(2), new Date());
      } else if (params.filter.time_range == "7days") {
        time_interval = "1h";
        time_slice_sec = 3600;
        dateArray = getDates((new Date()).lastDays(7), new Date());
      } else if (params.filter.time_range == "30days") {
        time_interval = "12h";
        time_slice_sec = 43200;
        dateArray = getDates((new Date()).lastDays(30), new Date());
      } else {
        time_interval = "10s";
        time_slice_sec = 10;
        dateArray = getDates((new Date()).lastDays(2), new Date());
      }
    } else {
      time_interval = "10s";
      dateArray = getDates((new Date()).lastDays(2), new Date());
    }
    var qryStr = '{"facets": {"terms": {"terms": {"field": "response.raw","size": 20,"order": "count","exclude": []},"facet_filter": {"fquery": {"query": {"filtered": {"query": {"bool": {"should": [{"query_string": {"query": "domain:\\"' + params.domainName + '\\""}}]}},"filter": {"bool": {"must": [{"range": {"@timestamp": {"from": ' + _from + ',"to": ' + _to + '}}}';
    var commonStr = ']'

    var endQry = '}}}}}}}},"size": 0}';

    var finalQryStr = '',
      browserQry = '',
      nonBrowserQry = '',
      spcntryQry = '';
    if (params && (params.filter == "" || params.filter == undefined)) {
      finalQryStr = qryStr + commonStr + endQry;
    } else {
      if (params.filter.device && params.filter.device == "Mobile") {
        browserQry = ',{"fquery": {"query": {"query_string": {"query": "name:(\'Mobile\')"}},"_cache": true}}';
      }
      if (params.filter.device && params.filter.device == "Non-Mobile") {
        nonBrowserQry = '],"must_not": [{"fquery": {"query": {"query_string": {"query": "name:(\'Mobile\')"}},"_cache": true}}';
      }
      if (params.filter.device == undefined || params.filter.device == '') {
        finalQryStr = qryStr + commonStr + endQry;
      } else if (params.filter.device == "Mobile") {
        finalQryStr = qryStr + browserQry + commonStr + endQry;
      } else if (params.filter.device == "Non-Mobile") {
        finalQryStr = qryStr + nonBrowserQry + commonStr + endQry;
      }
    }
    var qry = 'curl -XGET \'' + QryUrl + dateArray.join(",") + '/_search?pretty\' -d \'' + finalQryStr + '\'';
    //console.log("command-->",qry);
    child = exec(qry, function(error, stdout, stderr) {
      if (stdout != "") {
        format_response_data(JSON.parse(stdout).facets, time_slice_sec, 'top', function(resJson) {
          callback({
            status: true,
            response: resJson
          });
        });
      } else {
        var resJson = [];
        callback({
          status: true,
          response: resJson
        });
      }
    });
  },
  topresponse_time: function(params, callback) {
    var _to = (new Date()).getTime();
    //params.domainName='cdn.mbeans2.com';
    var time_slice_sec = 10;
    _from = _to - from_time("");
    var dateArray;
    if (params.filter != undefined && params.filter.time_range != undefined) {
      params.filter.time_range = params.filter.time_range.replace(" ", "");
      _from = _to - from_time(params.filter.time_range);
      if (params.filter.time_range == "15min") {
        time_interval = "10s";
        time_slice_sec = 10;
        dateArray = getDates((new Date()).lastDays(2), new Date());
      } else if (params.filter.time_range == "1hour") {
        time_interval = "30s";
        time_slice_sec = 30;
        dateArray = getDates((new Date()).lastDays(2), new Date());
      } else if (params.filter.time_range == "12hours" || params.filter.time_range == "6hours") {
        time_interval = "5m";
        time_slice_sec = 300;
        dateArray = getDates((new Date()).lastDays(2), new Date());
      } else if (params.filter.time_range == "24hours") {
        time_interval = "10m";
        time_slice_sec = 600;
        dateArray = getDates((new Date()).lastDays(2), new Date());
      } else if (params.filter.time_range == "7days") {
        time_interval = "1h";
        time_slice_sec = 3600;
        dateArray = getDates((new Date()).lastDays(7), new Date());
      } else if (params.filter.time_range == "30days") {
        time_interval = "12h";
        time_slice_sec = 43200;
        dateArray = getDates((new Date()).lastDays(30), new Date());
      } else {
        time_interval = "10s";
        time_slice_sec = 10;
        dateArray = getDates((new Date()).lastDays(2), new Date());
      }
    } else {
      time_interval = "10s";
      dateArray = getDates((new Date()).lastDays(2), new Date());
    }
    var qryStr = '{"facets": {"1": {"date_histogram": {"field": "@timestamp","interval": "' + time_interval + '"},"global": true,"facet_filter": {"fquery": {"query": {"filtered": {"query": {"query_string": {"query": "response:503"}},"filter": {"bool": {"must": [{"range": {"@timestamp": {"from": ' + _from + ',"to": ' + _to + '}}},{"fquery": {"query": {"query_string": {"query": "domain:\\"' + params.domainName + '\\""}},"_cache": true}}]}}}}}}},"3": {"date_histogram": {"field": "@timestamp","interval": "' + time_interval + '"},"global": true,"facet_filter": {"fquery": {"query": {"filtered": {"query": {"query_string": {"query": "response:502"}},"filter": {"bool": {"must": [{"range": {"@timestamp": {"from": ' + _from + ',"to": ' + _to + '}}},{"fquery": {"query": {"query_string": {"query": "domain:\\"' + params.domainName + '\\""}},"_cache": true}}]}}}}}}},"4": {"date_histogram": {"field": "@timestamp","interval": "' + time_interval + '"},"global": true,"facet_filter": {"fquery": {"query": {"filtered": {"query": {"query_string": {"query": "response:404"}},"filter": {"bool": {"must": [{"range": {"@timestamp": {"from": ' + _from + ',"to": ' + _to + '}}},{"fquery": {"query": {"query_string": {"query": "domain:\\"' + params.domainName + '\\""}},"_cache": true}}]}}}}}}},"8": {"date_histogram": {"field": "@timestamp","interval": "' + time_interval + '"},"global": true,"facet_filter": {"fquery": {"query": {"filtered": {"query": {"query_string": {"query": "response:304"}},"filter": {"bool": {"must": [{"range": {"@timestamp": {"from": ' + _from + ',"to": ' + _to + '}}},{"fquery": {"query": {"query_string": {"query": "domain:\\"' + params.domainName + '\\""}},"_cache": true}}]}}}}}}},"9": {"date_histogram": {"field": "@timestamp","interval": "' + time_interval + '"},"global": true,"facet_filter": {"fquery": {"query": {"filtered": {"query": {"query_string": {"query": "response:302"}},"filter": {"bool": {"must": [{"range": {"@timestamp": {"from": ' + _from + ',"to": ' + _to + '}}},{"fquery": {"query": {"query_string": {"query": "domain:\\"' + params.domainName + '\\""}},"_cache": true}}]}}}}}}},"10": {"date_histogram": {"field": "@timestamp","interval": "' + time_interval + '"},"global": true,"facet_filter": {"fquery": {"query": {"filtered": {"query": {"query_string": {"query": "response:301"}},"filter": {"bool": {"must": [{"range": {"@timestamp": {"from": ' + _from + ',"to": ' + _to + '}}},{"fquery": {"query": {"query_string": {"query": "domain:\\"' + params.domainName + '\\""}},"_cache": true}}]}}}}}}},"11":{"date_histogram": {"field": "@timestamp","interval": "' + time_interval + '"},"global": true,"facet_filter": {"fquery": {"query": {"filtered": {"query": {"query_string": {"query": "response:206"}},"filter": {"bool": {"must": [{"range": {"@timestamp": {"from": ' + _from + ',"to": ' + _to + '}}},{"fquery": {"query": {"query_string": {"query": "domain:\\"' + params.domainName + '\\""}},"_cache": true}}]}}}}}}},"12": {"date_histogram": {"field": "@timestamp","interval": "' + time_interval + '"},"global": true,"facet_filter": {"fquery": {"query": {"filtered": {"query": {"query_string": {"query": "response:200"}},"filter": {"bool": {"must": [{"range": {"@timestamp": {"from": ' + _from + ',"to": ' + _to + '}}},{"fquery": {"query": {"query_string": {"query": "domain:\\"' + params.domainName + '\\""}},"_cache": true}}]}}}}}}}},"size": 0}';

    var qry = 'curl -XGET \'' + QryUrl + dateArray.join(",") + '/_search?pretty\' -d \'' + qryStr + '\'';
    //console.log("command-->",qry);
    child = exec(qry, function(error, stdout, stderr) {
      if (stdout != "") {
        format_response_data(JSON.parse(stdout).facets, time_slice_sec, 'top_time', function(resJson) {
          callback({
            status: true,
            response: resJson
          });
        });
      } else {
        var resJson = [];
        callback({
          status: true,
          response: resJson
        });
      }
    });
  }
};

var roundToTwo = function(num) {
  return +(Math.round(num + "e+3") + "e-3");
}

var format_response_data = function(bw_json, time_slice_sec, resType, callback) {
  if (resType == "nopages") {
    if (bw_json && bw_json.terms) {
      callback(bw_json.terms.total);
    } else {
      callback(0);
    }

  } else if (resType == "top_cntry") {
    if (bw_json && bw_json.terms) {
      console.log("top list-->", bw_json.terms.terms);
      var indArr = []
      if (bw_json.terms.terms.length > 0) {
        var resJsonInd = bw_json.terms.terms
        for (var i = 0; i < resJsonInd.length; i++) {
          if (resJsonInd[i]) {
            var resInd = {}
            resInd.term = countries[resJsonInd[i].term];
            resInd.count = resJsonInd[i].count;
            indArr.push(resInd)
          }
        }
      }
      callback(indArr);
    } else {
      callback(0);
    }
  } else if (resType == "top") {
    if (bw_json && bw_json.terms) {
      console.log("top list-->", bw_json.terms.terms);
      callback(bw_json.terms.terms);
    } else {
      callback(0);
    }
  } else if (resType == "top_time") {
    var finalResp = []
    var entriesArr = {
      "1": "503",
      "3": "502",
      "4": "404",
      "8": "304",
      "9": "302",
      "10": "301",
      "11": "206",
      "12": "200"
    }
    for (var key in entriesArr) {
      if (bw_json[key].entries.length > 1) {
        var resJsonInd = bw_json[key].entries;
        var indArr = []
        for (var i = 0; i < resJsonInd.length; i++) {
          if (resJsonInd[i]) {
            var resInd = {}
            resInd.x = parseFloat(resJsonInd[i].time) / 1000;
            resInd.y = resJsonInd[i].count;
            indArr.push(resInd)
          }
        }
        if (indArr.length > 1) {
          var finalJson = {}
          finalJson.resCode = entriesArr[key];
          finalJson.timeSeries = indArr
          finalResp.push(finalJson);
        }
      }
    }
    callback(finalResp);
  } else if (resType == "cache_time") {
    hits_json = bw_json[6].entries;
    miss_json = bw_json[7].entries;
    var timesArr = []
    var finalJson = []
    var hitsArr = []
    var missArr = []
    if (hits_json.length > 0) {
      for (var i = 0; i < hits_json.length; i++) {
        if (!in_array(hits_json[i].time, timesArr)) {
          timesArr.push(hits_json[i].time);
          var resInd = {}
          resInd.time = parseFloat(hits_json[i].time) / 1000;
          resInd.hits = hits_json[i].count;
          hitsArr.push(resInd)
        }
      }
    }
    if (miss_json.length > 0) {
      for (var i = 0; i < miss_json.length; i++) {
        var resInd = {}
        resInd.time = parseFloat(miss_json[i].time) / 1000;
        resInd.miss = miss_json[i].count;
        missArr.push(resInd)
      }
    }
    var combineArr = combineArraysOnTime(hitsArr, missArr);
    if (combineArr.length > 0) {
      for (var i = 0; i < combineArr.length; i++) {
        var resInd = {}
        resInd.time = combineArr[i].time;
        //resInd.total = parseInt(combineArr[i].hits) + parseInt(combineArr[i].miss);
        resInd.hits = roundToTwo(combineArr[i].hits / time_slice_sec);
        resInd.total = roundToTwo(combineArr[i].miss / time_slice_sec);
        finalJson.push(resInd)
      }
    }
    callback(finalJson);
  } else {
    bw_json = bw_json[6].entries;
    var bw_res_json = [],
      v = 0,
      bw_summary_resp = {},
      totalBytes = 0,
      totalCnt = 0;
    prepareResponse();

    function prepareResponse() {
      if (v < bw_json.length) {
        var bw_obj = {};
        bw_obj.x = parseFloat(bw_json[v].time) / 1000;
        if (resType == "bw") {
          var mbs = units.convert(bw_json[v].total + ' bytes to megabits');
          var mbspersec = roundToTwo(mbs / time_slice_sec);
          bw_obj.y = mbspersec
          totalCnt += bw_json[v].total_count;
          totalBytes += mbspersec;
        } else if (resType == "bwGraph") {
          var mbs = (bw_json[v].total) / 1073741824;
          bw_obj.y = roundToTwo(mbs)
          totalCnt += bw_json[v].total_count;
          totalBytes += mbs;
        } else {
          bw_obj.y = (bw_json[v].count) / time_slice_sec;
        }
        if (bw_json.length > 3) {
          if (v != bw_json.length - 1) {
            bw_res_json.push(bw_obj);
          }
        } else {
          bw_res_json.push(bw_obj);
        }
        v++;
        prepareResponse();
      } else {
        if (resType == "bw" || resType == "bwGraph") {
          bw_summary_resp.totalCnt = totalCnt
          bw_summary_resp.totalBytes = totalBytes
          callback(bw_res_json, bw_summary_resp);
        } else {
          callback(bw_res_json);
        }
      }
    }
  }
};

function combineArraysOnTime(arr1, arr2) {
  var combined = [];

  function findSecond(time, second) {
    for (var i = 0; i < second.length; i++) {
      if (second[i].time === time) {
        return second[i];
      }
    }
    return null
  }

  while (el = arr1.pop()) {
    var getSec = findSecond(el.time, arr2);
    if (getSec) {
      for (var l in getSec) {
        if (!(l in el)) {
          el[l] = getSec[l];
        }
      }
      combined.push(el);
    }
  }
  //reverse the array, because we popped the objects
  return combined.reverse();
}

var from_time = function(data) {
  switch (data) {
    case '15min':
      return 15 * 60 * 1000;
      break;
    case '1hour':
      return 60 * 60 * 1000;
      break;
    case '3hours':
      return 3 * 60 * 60 * 1000;
      break;
    case '6hours':
      return 6 * 60 * 60 * 1000;
      break;
    case '12hours':
      return 12 * 60 * 60 * 1000;
      break;
    case '24hours':
      return 24 * 60 * 60 * 1000;
      break;
    case '7days':
      return 7 * 24 * 60 * 60 * 1000;
      break;
    case '15days':
      return 15 * 24 * 60 * 60 * 1000;
      break;
    case '30days':
      return 30 * 24 * 60 * 60 * 1000;
      break;
    default:
      return 15 * 60 * 1000;
      break;
  }
};

Date.prototype.addDays = function(days) {
  var dat = new Date(this.valueOf())
  dat.setDate(dat.getDate() + days);
  return dat;
}
Date.prototype.lastDays = function(days) {
  var dat = new Date(this.valueOf())
  dat.setDate(dat.getDate() - days);
  return dat;
}

function getDates(startDate, stopDate) {
  var dateArray = new Array();
  var currentDate = startDate;
  while (currentDate <= stopDate) {
    dateArray.push("logstash-" + currentDate.format("yyyy.mm.dd"))
    currentDate = currentDate.addDays(1);
  }
  return dateArray;
}

var dateFormat = function() {
  var token = /d{1,4}|m{1,4}|yy(?:yy)?|([HhMsTt])\1?|[LloSZ]|"[^"]*"|'[^']*'/g,
    timezone = /\b(?:[PMCEA][SDP]T|(?:Pacific|Mountain|Central|Eastern|Atlantic) (?:Standard|Daylight|Prevailing) Time|(?:GMT|UTC)(?:[-+]\d{4})?)\b/g,
    timezoneClip = /[^-+\dA-Z]/g,
    pad = function(val, len) {
      val = String(val);
      len = len || 2;
      while (val.length < len) val = "0" + val;
      return val;
    };

  // Regexes and supporting functions are cached through closure
  return function(date, mask, utc) {
    var dF = dateFormat;

    // You can't provide utc if you skip other args (use the "UTC:" mask prefix)
    if (arguments.length == 1 && Object.prototype.toString.call(date) == "[object String]" && !/\d/.test(date)) {
      mask = date;
      date = undefined;
    }

    // Passing date through Date applies Date.parse, if necessary
    date = date ? new Date(date) : new Date;
    if (isNaN(date)) throw SyntaxError("invalid date");

    mask = String(dF.masks[mask] || mask || dF.masks["default"]);

    // Allow setting the utc argument via the mask
    if (mask.slice(0, 4) == "UTC:") {
      mask = mask.slice(4);
      utc = true;
    }

    var _ = utc ? "getUTC" : "get",
      d = date[_ + "Date"](),
      D = date[_ + "Day"](),
      m = date[_ + "Month"](),
      y = date[_ + "FullYear"](),
      H = date[_ + "Hours"](),
      M = date[_ + "Minutes"](),
      s = date[_ + "Seconds"](),
      L = date[_ + "Milliseconds"](),
      o = utc ? 0 : date.getTimezoneOffset(),
      flags = {
        d: d,
        dd: pad(d),
        ddd: dF.i18n.dayNames[D],
        dddd: dF.i18n.dayNames[D + 7],
        m: m + 1,
        mm: pad(m + 1),
        mmm: dF.i18n.monthNames[m],
        mmmm: dF.i18n.monthNames[m + 12],
        yy: String(y).slice(2),
        yyyy: y,
        h: H % 12 || 12,
        hh: pad(H % 12 || 12),
        H: H,
        HH: pad(H),
        M: M,
        MM: pad(M),
        s: s,
        ss: pad(s),
        l: pad(L, 3),
        L: pad(L > 99 ? Math.round(L / 10) : L),
        t: H < 12 ? "a" : "p",
        tt: H < 12 ? "am" : "pm",
        T: H < 12 ? "A" : "P",
        TT: H < 12 ? "AM" : "PM",
        Z: utc ? "UTC" : (String(date).match(timezone) || [""]).pop().replace(timezoneClip, ""),
        o: (o > 0 ? "-" : "+") + pad(Math.floor(Math.abs(o) / 60) * 100 + Math.abs(o) % 60, 4),
        S: ["th", "st", "nd", "rd"][d % 10 > 3 ? 0 : (d % 100 - d % 10 != 10) * d % 10]
      };

    return mask.replace(token, function($0) {
      return $0 in flags ? flags[$0] : $0.slice(1, $0.length - 1);
    });
  };
}();

// Some common format strings
dateFormat.masks = {
  "default": "ddd mmm dd yyyy HH:MM:ss",
  shortDate: "m/d/yy",
  mediumDate: "mmm d, yyyy",
  longDate: "mmmm d, yyyy",
  fullDate: "dddd, mmmm d, yyyy",
  shortTime: "h:MM TT",
  mediumTime: "h:MM:ss TT",
  longTime: "h:MM:ss TT Z",
  isoDate: "yyyy-mm-dd",
  isoTime: "HH:MM:ss",
  isoDateTime: "yyyy-mm-dd'T'HH:MM:ss",
  isoUtcDateTime: "UTC:yyyy-mm-dd'T'HH:MM:ss'Z'"
};

// Internationalization strings
dateFormat.i18n = {
  dayNames: [
    "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat",
    "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"
  ],
  monthNames: [
    "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec",
    "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"
  ]
};

// For convenience...
Date.prototype.format = function(mask, utc) {
  return dateFormat(this, mask, utc);
};

var in_array = function(needle, haystack, argStrict) {
  var key = '',
    strict = !!argStrict;

  if (strict) {
    for (key in haystack) {
      if (haystack[key] === needle) {
        return true;
      }
    }
  } else {
    for (key in haystack) {
      if (haystack[key] == needle) {
        return true;
      }
    }
  }
  return false;
}

var countries = {
  "AF": "Afghanistan",
  "AX": "Aland Islands",
  "AL": "Albania",
  "DZ": "Algeria",
  "AS": "American Samoa",
  "AD": "Andorra",
  "AO": "Angola",
  "AI": "Anguilla",
  "A1": "Anonymous Proxy",
  "AQ": "Antarctica",
  "AG": "Antigua and Barbuda",
  "AR": "Argentina",
  "AM": "Armenia",
  "AW": "Aruba",
  "AP": "Asia/Pacific Region",
  "AU": "Australia",
  "AT": "Austria",
  "AZ": "Azerbaijan",
  "BS": "Bahamas",
  "BH": "Bahrain",
  "BD": "Bangladesh",
  "BB": "Barbados",
  "BY": "Belarus",
  "BE": "Belgium",
  "BZ": "Belize",
  "BJ": "Benin",
  "BM": "Bermuda",
  "BT": "Bhutan",
  "BO": "Bolivia",
  "BQ": "Bonaire, Saint Eustatius and Saba",
  "BA": "Bosnia and Herzegovina",
  "BW": "Botswana",
  "BV": "Bouvet Island",
  "BR": "Brazil",
  "IO": "British Indian Ocean Territory",
  "BN": "Brunei Darussalam",
  "BG": "Bulgaria",
  "BF": "Burkina Faso",
  "BI": "Burundi",
  "CM": "Cameroon",
  "KH": "Cambodia",
  "CA": "Canada",
  "CV": "Cape Verde",
  "KY": "Cayman Islands",
  "CF": "Central African Republic",
  "TD": "Chad",
  "CL": "Chile",
  "CN": "China",
  "CX": "Christmas Island",
  "CC": "Cocos (Keeling) Islands",
  "CO": "Colombia",
  "KM": "Comoros",
  "CG": "Congo",
  "CD": "Congo, The Democratic Republic of the",
  "CK": "Cook Islands",
  "CR": "Costa Rica",
  "CI": "Cote d'Ivoire",
  "HR": "Croatia",
  "CU": "Cuba",
  "CW": "Curacao",
  "CY": "Cyprus",
  "CZ": "Czech Republic",
  "DK": "Denmark",
  "DJ": "Djibouti",
  "DM": "Dominica",
  "DO": "Dominican Republic",
  "EC": "Ecuador",
  "EG": "Egypt",
  "SV": "El Salvador",
  "GQ": "Equatorial Guinea",
  "ER": "Eritrea",
  "EE": "Estonia",
  "ET": "Ethiopia",
  "EU": "Europe",
  "FK": "Falkland Islands (Malvinas)",
  "FO": "Faroe Islands",
  "FI": "Finland",
  "FJ": "Fiji",
  "FR": "France",
  "GF": "French Guiana",
  "PF": "French Polynesia",
  "TF": "French Southern Territories",
  "GA": "Gabon",
  "GM": "Gambia",
  "GE": "Georgia",
  "DE": "Germany",
  "GH": "Ghana",
  "GI": "Gibraltar",
  "GR": "Greece",
  "GL": "Greenland",
  "GD": "Grenada",
  "GP": "Guadeloupe",
  "GU": "Guam",
  "GT": "Guatemala",
  "GN": "Guinea",
  "GW": "Guinea-Bissau",
  "GG": "Guernsey",
  "GY": "Guyana",
  "HT": "Haiti",
  "HM": "Heard Island and McDonald Islands",
  "HN": "Honduras",
  "HK": "Hong Kong",
  "HU": "Hungary",
  "IS": "Iceland",
  "IN": "India",
  "ID": "Indonesia",
  "IR": "Iran",
  "IQ": "Iraq",
  "IE": "Ireland",
  "IM": "Isle of Man",
  "IL": "Israel",
  "IT": "Italy",
  "JM": "Jamaica",
  "JP": "Japan",
  "JE": "Jersey",
  "JO": "Jordan",
  "KZ": "Kazakhstan",
  "KE": "Kenya",
  "KI": "Kiribati",
  "KW": "Kuwait",
  "KG": "Kyrgyzstan",
  "LA": "Lao People's Democratic Republic",
  "LV": "Latvia",
  "LB": "Lebanon",
  "LR": "Liberia",
  "LY": "Libyan Arab Jamahiriya",
  "LI": "Liechtenstein",
  "LT": "Lithuania",
  "LS": "Lesotho",
  "LU": "Luxembourg",
  "MO": "Macao",
  "MK": "Macedonia",
  "MG": "Madagascar",
  "MY": "Malaysia",
  "MW": "Malawi",
  "ML": "Mali",
  "MT": "Malta",
  "MV": "Maldives",
  "MH": "Marshall Islands",
  "MQ": "Martinique",
  "MR": "Mauritania",
  "MU": "Mauritius",
  "YT": "Mayotte",
  "MX": "Mexico",
  "FM": "Micronesia",
  "MD": "Moldova",
  "MC": "Monaco",
  "MN": "Mongolia",
  "MS": "Montserrat",
  "ME": "Montenegro",
  "MA": "Morocco",
  "MZ": "Mozambique",
  "MM": "Myanmar",
  "NA": "Namibia",
  "NR": "Nauru",
  "NP": "Nepal",
  "NL": "Netherlands",
  "NC": "New Caledonia",
  "NZ": "New Zealand",
  "NI": "Nicaragua",
  "NE": "Niger",
  "NG": "Nigeria",
  "NU": "Niue",
  "NF": "Norfolk Island",
  "MP": "Northern Mariana Islands",
  "KP": "North Korea",
  "NO": "Norway",
  "OM": "Oman",
  "O1": "Other Country",
  "PK": "Pakistan",
  "PW": "Palau",
  "PS": "Palestinian Territory",
  "PA": "Panama",
  "PG": "Papua New Guinea",
  "PY": "Paraguay",
  "PE": "Peru",
  "PH": "Philippines",
  "PN": "Pitcairn",
  "PL": "Poland",
  "PT": "Portugal",
  "PR": "Puerto Rico",
  "QA": "Qatar",
  "RE": "Reunion",
  "RO": "Romania",
  "RU": "Russian Federation",
  "RW": "Rwanda",
  "A2": "Satellite Provider",
  "WS": "Samoa",
  "SM": "San Marino",
  "ST": "Sao Tome and Principe",
  "BL": "Saint Bartelemey",
  "SH": "Saint Helena",
  "KN": "Saint Kitts and Nevis",
  "LC": "Saint Lucia",
  "MF": "Saint Martin",
  "PM": "Saint Pierre and Miquelon",
  "VC": "Saint Vincent and the Grenadines",
  "SA": "Saudi Arabia",
  "SN": "Senegal",
  "RS": "Serbia",
  "SC": "Seychelles",
  "SG": "Singapore",
  "SX": "Sint Maarten",
  "SL": "Sierra Leone",
  "SK": "Slovakia",
  "SI": "Slovenia",
  "SB": "Solomon Islands",
  "SO": "Somalia",
  "ZA": "South Africa",
  "GS": "South Georgia and the South Sandwich Islands",
  "KR": "South Korea",
  "SS": "South Sudan",
  "ES": "Spain",
  "LK": "Sri Lanka",
  "SD": "Sudan",
  "SR": "Suriname",
  "SJ": "Svalbard and Jan Mayen",
  "SZ": "Swaziland",
  "SE": "Sweden",
  "CH": "Switzerland",
  "SY": "Syrian Arab Republic",
  "TW": "Taiwan",
  "TJ": "Tajikistan",
  "TZ": "Tanzania",
  "TG": "Togo",
  "TO": "Tonga",
  "TH": "Thailand",
  "TL": "Timor-Leste",
  "TK": "Tokelau",
  "TT": "Trinidad and Tobago",
  "TN": "Tunisia",
  "TR": "Turkey",
  "TM": "Turkmenistan",
  "TC": "Turks and Caicos Islands",
  "TV": "Tuvalu",
  "UG": "Uganda",
  "UA": "Ukraine",
  "AE": "United Arab Emirates",
  "GB": "United Kingdom",
  "US": "United States",
  "UM": "United States Minor Outlying Islands",
  "UY": "Uruguay",
  "UZ": "Uzbekistan",
  "VU": "Vanuatu",
  "VA": "Vatican City State",
  "VE": "Venezuela",
  "VN": "Vietnam",
  "VG": "Virgin Islands, British",
  "VI": "Virgin Islands, U.S.",
  "WF": "Wallis and Futuna",
  "EH": "Western Sahara",
  "YE": "Yemen",
  "ZM": "Zambia",
  "ZW": "Zimbabwe"
};
